/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <100>;
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp Q      &kp W     &kp E     &kp R  &kp T      &kp Y      &kp U  &kp I      &kp O     &kp P     &kp BSPC
&kp ESC     &kp A      &kp S     &kp D     &kp F  &kp G      &kp H      &kp J  &kp K      &kp L     &kp SEMI  &kp APOS
&kp LSHIFT  &kp Z      &kp X     &kp C     &kp V  &kp B      &kp N      &kp M  &kp COMMA  &kp DOT   &kp FSLH  &mt RSHIFT ENTER
&kp CAPS    &kp LCTRL  &kp LALT  &kp LGUI  &mo 1  &kp SPACE  &kp SPACE  &mo 2  &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT
            >;
        };

        lower_layer {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &trans
&kp DEL        &kp F1        &kp F2      &kp F3         &kp F4        &kp F5         &kp F6         &kp LS(UNDER)  &kp LS(PLUS)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(PIPE)
&trans         &kp F7        &kp F8      &kp F9         &kp F10       &kp F11        &kp F12        &kp LS(NUHS)   &kp LS(NUBS)  &kp HOME      &kp END       &trans
&trans         &trans        &trans      &trans         &trans        &trans         &trans         &mo 3          &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
            >;
        };

        raise_layer {
            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4   &kp N5   &kp N6   &kp N7     &kp N8      &kp N9        &kp N0        &trans
&kp DEL    &kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6   &kp MINUS  &kp EQUAL   &kp LBKT      &kp RBKT      &kp BSLH
&trans     &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &kp NUHS   &kp NUBS    &kp PG_UP     &kp PG_DN     &trans
&trans     &trans  &trans  &trans  &mo 3    &trans   &trans   &trans     &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp KP_NUMLOCK   &kp KP_N7   &kp KP_N8   &kp KP_N9     &kp KP_EQUAL  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &kp KP_DIVIDE    &kp KP_N4   &kp KP_N5   &kp KP_N6     &kp KP_MINUS  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &kp KP_MULTIPLY  &kp KP_N1   &kp KP_N2   &kp KP_N3     &kp KP_PLUS   &kp KP_ENTER
&tog 4      &trans        &trans        &trans        &trans        &trans        &kp KP_N0        &kp KP_DOT  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
            >;
        };

        steno_layer {
            bindings = <
&none   &kp Q  &kp W  &kp E   &kp R  &kp T  &kp Y  &kp U  &kp I   &kp O  &kp P     &kp LBKT
&none   &kp A  &kp S  &kp D   &kp F  &kp G  &kp H  &kp J  &kp K   &kp L  &kp SEMI  &kp APOS
&none   &none  &none  &none   &none  &none  &none  &none  &none   &none  &none     &none
&tog 4  &none  &none  &kp N1  &kp C  &kp V  &kp N  &kp M  &kp N0  &none  &none     &none
            >;
        };
    };
};
